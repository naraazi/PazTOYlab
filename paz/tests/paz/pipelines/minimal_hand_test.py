import pytest
import os
import numpy as np
from tensorflow.keras.utils import get_file
from paz.backend.image import load_image
from paz.applications import DetNetHandKeypoints
from paz.applications import MinimalHandPoseEstimation


@pytest.fixture
def image():
    URL = ('https://github.com/oarriaga/altamira-data/releases/download'
           '/v0.14/image_with_hand.png')
    filename = os.path.basename(URL)
    fullpath = get_file(filename, URL, cache_subdir='paz/tests')
    image = load_image(fullpath)
    return image


@pytest.fixture
def keypoints3D():
    return np.array([[4.59543616e-02, 1.01974916e+00, -4.18092608e-02],
                     [1.97005451e-01, 7.27735639e-01, 9.93182510e-03],
                     [4.65905547e-01, 4.04410481e-01, 2.02238679e-01],
                     [5.27417541e-01, 1.19056322e-01, 3.12423348e-01],
                     [7.06151009e-01, -1.45121396e-01, 5.78676224e-01],
                     [2.29134336e-01, 5.17019629e-03, -1.86777227e-02],
                     [1.90560371e-01, -4.16686863e-01, 3.08839791e-02],
                     [2.45253161e-01, -6.03881776e-01, 1.07773989e-02],
                     [2.45344773e-01, -9.46746171e-01, 3.10686044e-03],
                     [-1.17659438e-10, 6.89383772e-10, -1.66820258e-09],
                     [-1.06274009e-01, -3.72214854e-01, -1.83141753e-02],
                     [-1.03316717e-01, -7.05676019e-01, 5.39230146e-02],
                     [-1.03476852e-01, -9.64827240e-01, 4.52297479e-02],
                     [-1.65308565e-01, 2.90882755e-02, 7.35934004e-02],
                     [-2.57835418e-01, -2.79438645e-01, 5.13521582e-02],
                     [-3.15736741e-01, -5.79943478e-01, 7.48071373e-02],
                     [-3.92356992e-01, -8.97268593e-01, 2.25844055e-01],
                     [-3.08868229e-01, 1.16529495e-01, 1.68661669e-01],
                     [-4.35660630e-01, -1.56533003e-01, 2.14194521e-01],
                     [-5.57054341e-01, -3.33916962e-01, 2.07406536e-01],
                     [-6.17552280e-01, -5.51497638e-01, 3.22265536e-01]])


@pytest.fixture
def keypoints2D():
    return [np.array([[300, 381],
                      [356, 337],
                      [393, 293],
                      [412, 235],
                      [450, 205],
                      [337, 205],
                      [356, 132],
                      [356, 73],
                      [356, 29],
                      [300, 205],
                      [300, 132],
                      [300, 73],
                      [281, 14],
                      [262, 205],
                      [243, 146],
                      [225, 88],
                      [225, 44],
                      [225, 220],
                      [206, 176],
                      [187, 132],
                      [168, 102]])]


@pytest.fixture
def absolute_angles():
    return np.array([[-0.55003023, 0.54174083, -0.4142253, 0.4820799],
                     [-0.5624926, 0.56267995, -0.40999246, 0.4459814],
                     [-0.37669882, 0.38495845, -0.66506314, 0.51729673],
                     [-0.4377414, 0.47990933, -0.5837205, 0.48717532],
                     [-0.39964816, 0.31424704, -0.71694404, 0.47699222],
                     [-0.560527, 0.54840434, -0.41810822, 0.4585278],
                     [-0.55105317, 0.5303487, -0.45095497, 0.4601198],
                     [-0.575651, 0.5191569, -0.41850358, 0.47324073],
                     [-0.5741391, 0.5290268, -0.3691986, 0.50417006],
                     [-0.55413926, 0.5425503, -0.42098576, 0.47046748],
                     [-0.56464446, 0.522922, -0.45514807, 0.44784996],
                     [-0.5663422, 0.53870934, -0.4362606, 0.44578657],
                     [-0.5538392, 0.5553579, -0.41902977, 0.45744264],
                     [-0.5707189, 0.5323351, -0.40267533, 0.47828007],
                     [-0.56731933, 0.5098313, -0.46286795, 0.45163482],
                     [-0.5777617, 0.52286583, -0.44158795, 0.44475022],
                     [-0.5972225, 0.5244431, -0.40871197, 0.44859675],
                     [-0.56639063, 0.522546, -0.4045012, 0.49246943],
                     [-0.5949595, 0.4835725, -0.42747536, 0.4790049],
                     [-0.5709238, 0.5011917, -0.43002385, 0.48778316],
                     [-0.55398124, 0.52803624, -0.38558212, 0.51537263]])


@pytest.fixture
def relative_angles():
    return np.array([[-1.34068492, 1.32047989, -1.00966386],
                     [0., 0., 0.],
                     [0.69457068, 0.20520391, -0.16361796],
                     [-0.27570329, -0.02112254, 0.06886208],
                     [0.35222156, 0.00954176, -0.25213439],
                     [0., 0., 0.],
                     [0.06161169, 0.02644702, -0.03865006],
                     [-0.03251298, -0.08219342, 0.00327256],
                     [-0.02242868, -0.07831877, 0.08553838],
                     [0., 0., 0.],
                     [0.01865227, 0.03510356, -0.08437433],
                     [-0.03798096, -0.00657708, 0.03109676],
                     [-0.00874156, -0.00632347, 0.05786459],
                     [0., 0., 0.],
                     [0.05509129, 0.0783495, -0.10118576],
                     [-0.05101549, -0.01502028, 0.01699224],
                     [-0.04864834, -0.05780793, 0.01411513],
                     [0., 0., 0.],
                     [0.012155, -0.02141333, -0.10758127],
                     [0.02087628, 0.03197619, 0.04928241],
                     [-0.0196159, -0.03766432, 0.11479097]])


def test_DetNetHandKeypoints(image, keypoints3D, keypoints2D):
    detect = DetNetHandKeypoints()
    inferences = detect(image)
    assert np.allclose(inferences['keypoints3D'], keypoints3D, rtol=1e-03)
    assert np.allclose(inferences['keypoints2D'], keypoints2D, rtol=1e-03)


def test_MinimalHandPoseEstimation(image, keypoints3D, keypoints2D,
                                   absolute_angles, relative_angles):
    detect = MinimalHandPoseEstimation()
    inferences = detect(image)
    assert np.allclose(inferences['keypoints3D'], keypoints3D, rtol=1e-03)
    assert np.allclose(inferences['keypoints2D'], keypoints2D, rtol=1e-03)
    assert np.allclose(
        inferences['absolute_angles'], absolute_angles, rtol=1e-03)
    assert np.allclose(
        inferences['relative_angles'], relative_angles, rtol=1e-03)
